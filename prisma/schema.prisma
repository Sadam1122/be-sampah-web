generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  ADMIN
  WARGA
}

enum InsidenStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}

enum Hari {
  SENIN
  SELASA
  RABU
  KAMIS
  JUMAT
  SABTU
  MINGGU
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String   @unique
  password  String
  role      Role     @default(WARGA)
  desaId    String?  
  desa      Desa?    @relation(fields: [desaId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions       Session[]
  activityLogs   ActivityLog[]
  leaderboard    Leaderboard?  @relation(fields: [id], references: [userId], onDelete: Cascade)

  @@index([desaId])
}

model Desa {
  id                String              @id @default(uuid())
  nama              String              @unique
  kecamatan         String              
  kabupaten         String              
  provinsi          String              
  jadwalPengumpulan JadwalPengumpulan[]
  pengumpulanSampah PengumpulanSampah[]
  users             User[]
  insiden           Insiden[]

  @@index([nama])
}

model JadwalPengumpulan {
  id          String   @id @default(uuid())
  desaId      String   
  hari        Hari
  waktuMulai  DateTime 
  waktuSelesai DateTime 
  desa        Desa     @relation(fields: [desaId], references: [id], onDelete: Cascade)

  @@index([desaId, hari])
}

model PengumpulanSampah {
  id           String   @id @default(uuid())
  desaId       String   
  userId       String   
  berat        Decimal  @db.Decimal(5,2)
  jenisSampah  String   
  poin         Int
  waktu        DateTime @default(now())
  rt           String   @db.VarChar(3)
  rw           String   @db.VarChar(3)
  desa         Desa     @relation(fields: [desaId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([desaId])
  @@index([userId])
}

model Leaderboard {
  id                String   @id @default(uuid())
  userId            String   @unique
  totalPoin         Int    
  jumlahPengumpulan Int
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([totalPoin])
}

model Insiden {
  id          String   @id @default(uuid())
  desaId      String   
  type        String
  location    String
  description String   @db.Text
  status      InsidenStatus @default(PENDING)
  time        DateTime @default(now())
  reporterId  String
  handledById String?  
  timeHandled DateTime?
  desa        Desa     @relation(fields: [desaId], references: [id], onDelete: Cascade)
  reporter    User     @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  handledBy   User?    @relation(fields: [handledById], references: [id], onDelete: SetNull)

  @@index([desaId])
  @@index([status])
  @@index([reporterId])
  @@index([handledById])
}

model Session {
  id          String    @id @default(uuid())
  token       String    @unique
  expires     DateTime
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}

model ActivityLog {
  id          String    @id @default(uuid())
  action      String
  details     String?   @db.Text
  ipAddress   String?
  userAgent   String?   @db.Text
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime  @default(now())

  @@index([userId])
  @@index([createdAt])
}
